---
import { getCollection } from 'astro:content';
import BlogLayout from '@/layouts/blog.astro';
import '@/styles/global.css';
import { formatDate } from '@/lib/date';
import { Calendar, User } from 'lucide-astro';
import BlogShareButton from '@/modules/blog/blog-share-button.astro';
import { getEntry } from 'astro:content';
import { Link } from '@/components/ui/link';
import { P, match } from 'ts-pattern';
import BlogListCard from '@/modules/blog/blog-list-card.astro';
import BlogReaction from '@/modules/blog/blog-reaction.astro';

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

let { entry } = Astro.props;

let { Content } = await entry.render();
let { data } = await getEntry('authors', entry.data.author.id);
let relatedPosts = await match(entry.data.relatedPosts)
  .with(P.nullish, () => Promise.resolve([]))
  .otherwise((posts) => Promise.all(posts.map(async (post) => await getEntry('blog', post.slug))));

let title = entry.data.title;
let slug = entry.slug;
let publishedAt = formatDate(entry.data.publishedAt);
let publishedAtISO = new Date(entry.data.publishedAt).toISOString();

let authorUsername = data.username;
let authorFullName = data.fullName;
let authorUrl = data.url;
---

<BlogLayout {...entry}>
  <section class='pt-20 pb-6 w-11/12 mx-auto max-w-5xl border-b border-neutral-800'>
    <h1
      class='text-4xl pb-4 md:pb-8 lg:pb-10 lg:text-6xl text-balance font-bold text-transparent bg-clip-text bg-gradient-to-b from-neutral-100 to-neutral-800'
    >
      {title}
    </h1>

    <div class='flex sm:items-center justify-between'>
      <div class='inline-flex max-sm:flex-col sm:items-center gap-x-2'>
        <div
          title={`Published at ${publishedAt}`}
          class='inline-flex items-center gap-x-2 font-medium max-sm:pb-2 text-neutral-400'
        >
          <Calendar size='1rem' />
          <time datetime={publishedAtISO}>{publishedAt}</time>
        </div>

        <span class='max-sm:hidden'>-</span>

        <div class='inline-flex items-center gap-x-2 font-medium max-sm:pb-2 text-neutral-400'>
          <User size='1rem' />

          <Link
            href={authorUrl}
            title={`Written by ${authorFullName}`}
            rel='noopener noreferrer'
            target='_blank'
            variant='link'
            className='h-0 p-0 text-neutral-400 text-base'
          >
            {authorUsername}
          </Link>
        </div>
      </div>

      <BlogShareButton authorUsername={authorUsername} slug={slug} />
    </div>
  </section>

  <section class='w-11/12 max-w-5xl mx-auto pt-4 lg:pt-8 pb-8 lg:pb-16'>
    <article class='prose prose-invert'>
      <Content />
    </article>
  </section>

  <BlogReaction />

  {
    relatedPosts.length > 0 && (
      <section class='w-11/12 max-w-5xl mx-auto pt-4 lg:pt-8 pb-8 lg:pb-16'>
        <h2 class='text-3xl lg:text-4xl font-bold text-neutral-200'>
          <span class='sr-only'>Related Posts</span>You might like
        </h2>

        <div class='grid lg:grid-cols-2 gap-4 pt-4'>
          {relatedPosts.map((post) => (
            <BlogListCard {...post} />
          ))}
        </div>
      </section>
    )
  }
</BlogLayout>
